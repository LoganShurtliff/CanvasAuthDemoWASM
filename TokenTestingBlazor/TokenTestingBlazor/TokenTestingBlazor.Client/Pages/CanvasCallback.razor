@page "/api/auth/callback/Canvas"
@*This is the callback page after Canvas Authentication*@
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using System.Text.Json
@using TokenTestingBlazor.Client.Models

@inject HttpClient client
@inject CookieStorageAccessor cookie

<h3>CanvasCallback</h3>

<p>@Response</p>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string? AuthCode { get; set; }

    public string? Response { get; set; }


    protected override async Task OnInitializedAsync()
    {
        string AzureToken = await cookie.GetValueAsync<string>("azure_access_token");
        
        if (AzureToken != null && AuthCode != null)
        {
            try
            {
                //Configure this endpoint to whatever domain this is running on
                var apiEndpoint = "http://localhost:3000/api/auth/getToken?code=" + AuthCode;
                
                client.DefaultRequestHeaders.Clear();
                client.DefaultRequestHeaders.Add("AzureToken", AzureToken);
                
                var response = await client.GetAsync(apiEndpoint);
                
                var Token = JsonSerializer.Deserialize<CanvasTokenDTO>(response.Content.ReadAsStream());
                
                await cookie.SetValueAsync<string>("canvas_access_token", Token.access_token, Token.expires_in); 
                await cookie.SetValueAsync<string>("canvas_refresh_token", Token.refresh_token, Int32.MaxValue);
                Response = "Canvas Token Aquired! Check your cookies.";
            }
            catch (Exception ex)
            {
                Response = ex.Message;
            }
        }
        else
        {
            Response = "This page has been accessed in error!";
        }

        
        
    }
}
